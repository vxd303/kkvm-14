name: Build AOSP LLVM14 + OLLVM LegacyPass

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04
    env:
      TMPDIR: ${{ github.workspace }}/.tmp
      CCACHE_DIR: ${{ github.workspace }}/.ccache

    steps:
      # 0) Mở rộng dung lượng trống trên runner
      - name: Maximize free space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 512
          temp-reserve-mb: 512
          swap-size-mb: 1
          remove-android: true
          remove-dotnet: true
          remove-haskell: true
          remove-docker-images: true

      - name: Show free space (before)
        run: df -h


      - name: Prepare temp/cache dirs
        run: mkdir -p "$TMPDIR" "$CCACHE_DIR"

      # 1) Checkout repo CỦA BẠN để lấy manifest_8481493.xml ở thư mục gốc
      - name: Checkout this repo (for manifest)
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      # 2) Cài deps
      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            build-essential cmake ninja-build python3 git curl xz-utils ccache rsync jq
          sudo apt-get clean
          sudo rm -rf /var/lib/apt/lists/*

      # 3) Repo tool
      - name: Install latest repo tool
        run: |
          sudo curl -sSL https://storage.googleapis.com/git-repo-downloads/repo -o /usr/local/bin/repo
          sudo chmod +x /usr/local/bin/repo
          repo --version || true

      # 4) (tuỳ) libffi6
      - name: Install libffi6 dependency
        run: |
          curl -sSLO http://archive.ubuntu.com/ubuntu/pool/main/libf/libffi/libffi6_3.2.1-8_amd64.deb
          sudo dpkg -i libffi6_3.2.1-8_amd64.deb || true
          rm -f libffi6_3.2.1-8_amd64.deb

      # 5) Git config
      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      # 6) repo init + sync AOSP toolchain
      - name: Initialize and Sync AOSP Toolchain Source
        run: |
          set -euxo pipefail
          mkdir aosp_toolchain_src
          cd aosp_toolchain_src
          repo init -u https://android.googlesource.com/platform/manifest -b llvm-toolchain
          cp ../manifest_8481493.xml .repo/manifests/
          repo init -m manifest_8481493.xml

          if repo sync -c \
              --no-clone-bundle \
              --no-tags \
              --optimized-fetch \
              --prune \
              --partial-clone \
              --clone-filter=blob:none \
              -j"$(nproc)"; then
            echo "Partial clone OK"
          else
            echo "Partial clone failed; fallback to normal slim sync"
            repo sync -c \
              --no-clone-bundle \
              --no-tags \
              --optimized-fetch \
              --prune \
              -j"$(nproc)"
          fi


      # 7) Tải patch LegacyPass + clone upstream llvm-project (14.x), apply patch
      - name: Fetch LegacyPass patch + Clone upstream llvm-project (14.x)
        run: |
          set -eux
          curl -L "https://heroims.github.io/obfuscator/LegacyPass/ollvm14.patch" -o ollvm14.patch
          git clone --depth=1 --branch release/14.x https://github.com/llvm/llvm-project.git upstream-llvm
          cd upstream-llvm
          if git apply ../ollvm14.patch; then
            echo "LegacyPass patch applied to upstream llvm-project"
          else
            echo "Patch failed cleanly; retry with --reject --ignore-whitespace"
            git apply --reject --ignore-whitespace ../ollvm14.patch
            find . -name '*.rej' -print -exec sed -n '1,120p' {} \; || true
          fi

      # 8) Overlay đúng phần Obfuscation vào AOSP (không đè nguyên cây)
      - name: Overlay OLLVM into AOSP llvm-project (non-destructive)
        run: |
          set -euxo pipefail
          rsync -a upstream-llvm/llvm/lib/Transforms/Obfuscation/ \
            aosp_toolchain_src/toolchain/llvm-project/llvm/lib/Transforms/Obfuscation/
          rsync -a upstream-llvm/llvm/include/llvm/Transforms/Obfuscation/ \
            aosp_toolchain_src/toolchain/llvm-project/llvm/include/llvm/Transforms/Obfuscation/

          T="aosp_toolchain_src/toolchain/llvm-project/llvm/lib/Transforms/CMakeLists.txt"
          grep -q 'add_subdirectory(Obfuscation)' "$T" || echo 'add_subdirectory(Obfuscation)' >> "$T"

      # 9) Build tối thiểu
      - name: Build AOSP LLVM (minimal)
        timeout-minutes: 360
        working-directory: ./aosp_toolchain_src
        run: |
          set -euxo pipefail
          ccache --max-size=2G || true
          python3 toolchain/llvm_android/build.py \
            --no-build=windows \
            --skip-package \
            --skip-runtimes
          ccache -s || true
          du -sh out || true
          df -h

      # 10) Dọn out/*, giữ stage2-install
      - name: Prune build outputs (keep stage2-install only)
        working-directory: ./aosp_toolchain_src
        run: |
          set -euxo pipefail
          if [ -d out ]; then
            find out -mindepth 1 -maxdepth 1 ! -name stage2-install -exec rm -rf {} +
          fi
          du -sh out || true
          df -h

      # 11) Đóng gói tối thiểu: chỉ clang* trong stage2-install/bin
      - name: Package minimal clang binaries
        working-directory: ./aosp_toolchain_src/out
        run: |
          set -euxo pipefail
          test -d stage2-install/bin
          mkdir -p pkg/bin
          cp -av stage2-install/bin/clang* pkg/bin/
          tar -I 'xz -9e' -cf clang14-ollvm-legacy-stage2-min.tar.xz -C pkg .
          du -sh clang14-ollvm-legacy-stage2-min.tar.xz
          df -h

      # 12) Upload artifact
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: clang14-ollvm-legacy-stage2-min
          path: aosp_toolchain_src/out/clang14-ollvm-legacy-stage2-min.tar.xz
          retention-days: 7
