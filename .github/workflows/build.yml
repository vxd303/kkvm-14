name: Build AOSP LLVM14 + OLLVM LegacyPass (preflight)

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04
    env:
      TMPDIR: ${{ github.workspace }}/.tmp
      CCACHE_DIR: ${{ github.workspace }}/.ccache

    steps:
      # Free space sớm để tránh full đĩa
      - name: Maximize free space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 512
          temp-reserve-mb: 512
          swap-size-mb: 1
          remove-android: true
          remove-dotnet: true
          remove-haskell: true
          remove-docker-images: true

      - name: Show free space (before)
        run: df -h

      # Lấy manifest_8481493.xml từ repo của BẠN (thư mục gốc)
      - name: Checkout repo (for manifest)
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            build-essential ca-certificates cmake curl git ninja-build \
            python3 bison ccache xz-utils rsync jq
          sudo apt-get clean
          sudo rm -rf /var/lib/apt/lists/*

      - name: Install repo tool
        run: |
          sudo curl -sSL https://storage.googleapis.com/git-repo-downloads/repo -o /usr/local/bin/repo
          sudo chmod +x /usr/local/bin/repo
          repo --version || true

      # (tuỳ) libffi6 cho toolchain script cũ
      - name: Install libffi6 dependency
        run: |
          curl -sSLO http://archive.ubuntu.com/ubuntu/pool/main/libf/libffi/libffi6_3.2.1-8_amd64.deb
          sudo dpkg -i libffi6_3.2.1-8_amd64.deb || true
          rm -f libffi6_3.2.1-8_amd64.deb

      - name: Configure Git & prepare dirs
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          mkdir -p "$TMPDIR" "$CCACHE_DIR"

      # repo init + sync AOSP toolchain (dùng manifest tuỳ chỉnh nếu có)
      - name: Initialize and Sync AOSP Toolchain Source
        run: |
          set -euxo pipefail
          mkdir -p aosp_toolchain_src
          cd aosp_toolchain_src

          # Dùng --no-repo-verify và TMPDIR=/tmp cho ổn định
          TMPDIR=/tmp repo init -u https://android.googlesource.com/platform/manifest \
            -b llvm-toolchain --no-repo-verify

          MANIFEST="$GITHUB_WORKSPACE/manifest_8481493.xml"
          if [ -f "$MANIFEST" ]; then
            cp "$MANIFEST" .repo/manifests/
            TMPDIR=/tmp repo init -m "$(basename "$MANIFEST")" --no-repo-verify
          else
            echo "Custom manifest not found, using default branch manifest."
          fi

          # partial clone; fallback nếu lỗi
          if TMPDIR=/tmp repo sync -c --no-clone-bundle --no-tags --optimized-fetch \
               --prune --partial-clone --clone-filter=blob:none -j"$(nproc)"; then
            echo "Partial clone OK"
          else
            echo "Partial clone failed; fallback to slim sync"
            TMPDIR=/tmp repo sync -c --no-clone-bundle --no-tags \
               --optimized-fetch --prune -j"$(nproc)"
          fi

      # Tải patch Legacy + clone upstream-llvm 14.x, áp patch
      - name: Fetch LegacyPass patch + Clone upstream llvm-project (14.x)
        run: |
          set -eux
          curl -L "https://heroims.github.io/obfuscator/LegacyPass/ollvm14.patch" -o ollvm14.patch
          git clone --depth=1 --branch release/14.x https://github.com/llvm/llvm-project.git upstream-llvm
          cd upstream-llvm
          if git apply ../ollvm14.patch; then
            echo "LegacyPass patch applied to upstream llvm-project"
          else
            echo "Patch failed cleanly; retry with --reject --ignore-whitespace"
            git apply --reject --ignore-whitespace ../ollvm14.patch
            find . -name '*.rej' -print -exec sed -n '1,120p' {} \; || true
            exit 1
          fi

      # Overlay đầy đủ (Obfuscation + hook PassManagerBuilder.cpp) vào AOSP
      - name: Overlay OLLVM into AOSP (Obfuscation + Hook)
        run: |
          set -euxo pipefail
          ROOT=aosp_toolchain_src/toolchain/llvm-project
          
          # 1) Copy Obfuscation + headers
          rsync -a upstream-llvm/llvm/lib/Transforms/Obfuscation/ \
            "$ROOT/llvm/lib/Transforms/Obfuscation/"
          rsync -a upstream-llvm/llvm/include/llvm/Transforms/Obfuscation/ \
            "$ROOT/llvm/include/llvm/Transforms/Obfuscation/"
          
          # 2) Hook legacy PM (bắt buộc để nhận -fla/-bcf/... từ LegacyPass)
          cp -av upstream-llvm/llvm/lib/Transforms/IPO/PassManagerBuilder.cpp \
            "$ROOT/llvm/lib/Transforms/IPO/PassManagerBuilder.cpp"
          
          # 3) Bảo đảm CMake kéo Obfuscation
          T="$ROOT/llvm/lib/Transforms/CMakeLists.txt"
          grep -q 'add_subdirectory(Obfuscation)' "$T" || echo 'add_subdirectory(Obfuscation)' >> "$T"
          
          # 4) CMakeLists cho LLVMObfuscation (nếu bạn tự thêm file này)
          OBF_CMAKE="$ROOT/llvm/lib/Transforms/Obfuscation/CMakeLists.txt"
          if ! grep -q 'add_llvm_component_library' "$OBF_CMAKE"; then
            cat > "$OBF_CMAKE" <<'EOF'
          add_llvm_component_library(LLVMObfuscation
            CryptoUtils.cpp
            Substitution.cpp
            StringObfuscation.cpp
            BogusControlFlow.cpp
            Utils.cpp
            SplitBasicBlocks.cpp
            Flattening.cpp
          
            ADDITIONAL_HEADER_DIRS
            ${LLVM_MAIN_INCLUDE_DIR}/llvm/Transforms/Obfuscation
          
            DEPENDS
            intrinsics_gen
          
            LINK_COMPONENTS
            Core
            Support
            Analysis
            TransformUtils
          )
          EOF
          fi
          
          # 5) Ép link LLVMObfuscation vào opt & clang — nhưng CHỈ khi target tồn tại.
          #    Đồng thời đặt ở CUỐI FILE để đảm bảo thứ tự parse.
          
          OPT_CMAKE="$ROOT/llvm/tools/opt/CMakeLists.txt"
          if ! grep -q 'LLVMObfuscation' "$OPT_CMAKE"; then
            printf '\n# Link OLLVM (safe-guard if target exists)\nif(TARGET opt)\n  target_link_libraries(opt PRIVATE LLVMObfuscation)\nendif()\n' >> "$OPT_CMAKE"
          fi
          
          CLANGDRV_CMAKE="$ROOT/clang/tools/driver/CMakeLists.txt"
          if ! grep -q 'LLVMObfuscation' "$CLANGDRV_CMAKE"; then
            printf '\n# Link OLLVM (safe-guard if target exists)\nif(TARGET clang)\n  target_link_libraries(clang PRIVATE LLVMObfuscation)\nendif()\n' >> "$CLANGDRV_CMAKE"
          fi


      # PRE-FLIGHT CHECKS: kiểm tra cờ/registry trong source & CMake trước khi build
      - name: Preflight checks (fail fast if miswired)
        run: |
          set -euxo pipefail
          ROOT=aosp_toolchain_src/toolchain/llvm-project
          FILE_OBF="$ROOT/llvm/lib/Transforms/Obfuscation/CMakeLists.txt"
          FILE_OPT="$ROOT/llvm/tools/opt/CMakeLists.txt"
          FILE_CLANG="$ROOT/clang/tools/driver/CMakeLists.txt"
          FILE_PMB="$ROOT/llvm/lib/Transforms/IPO/PassManagerBuilder.cpp"
          
          echo ">> Check Obfuscation sources exist"
          test -f "$ROOT/llvm/lib/Transforms/Obfuscation/BogusControlFlow.cpp"
          test -f "$ROOT/llvm/lib/Transforms/Obfuscation/Substitution.cpp"
          
          echo ">> Check PassManagerBuilder hook contains flags"
          grep -E 'fla|bogus|bcf|sub|split|sobf' "$FILE_PMB" >/dev/null || {
            echo "::error::PassManagerBuilder.cpp does not contain OLLVM flags/hooks"
            exit 1
          }
          
          echo ">> Check Obfuscation CMake target exists"
          grep -Fq 'LLVMObfuscation' "$FILE_OBF" || {
            echo "::error::No LLVMObfuscation target in $FILE_OBF"; exit 1; }
          
          echo ">> Check link LLVMObfuscation into opt & clang (guarded)"
          grep -Fq 'LLVMObfuscation' "$FILE_OPT"   || { echo "::error::opt not linking LLVMObfuscation";   exit 1; }
          grep -Fq 'LLVMObfuscation' "$FILE_CLANG" || { echo "::error::clang not linking LLVMObfuscation"; exit 1; }
          
          echo "Preflight OK — ready to build"

      # BUILD
      - name: Build AOSP LLVM (minimal)
        timeout-minutes: 360
        working-directory: ./aosp_toolchain_src
        run: |
          set -euxo pipefail
          ccache --max-size=2G || true
          python3 toolchain/llvm_android/build.py \
            --no-build=windows \
            --skip-package \
            --skip-runtimes
          ccache -s || true
          du -sh out || true
          df -h

      # Giữ stage2-install
      - name: Prune build outputs (keep stage2-install only)
        working-directory: ./aosp_toolchain_src
        run: |
          set -euxo pipefail
          if [ -d out ]; then
            find out -mindepth 1 -maxdepth 1 ! -name stage2-install -exec rm -rf {} +
          fi
          du -sh out || true
          df -h

      # Đóng gói minimal: chỉ clang*
      - name: Package minimal clang binaries
        working-directory: ./aosp_toolchain_src/out
        run: |
          set -euxo pipefail
          test -d stage2-install/bin
          mkdir -p pkg/bin
          cp -av stage2-install/bin/clang* pkg/bin/
          tar -I 'xz -9e' -cf clang14-ollvm-legacy-stage2-min.tar.xz -C pkg .
          du -sh clang14-ollvm-legacy-stage2-min.tar.xz
          df -h

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: clang14-ollvm-legacy-stage2-min
          path: aosp_toolchain_src/out/clang14-ollvm-legacy-stage2-min.tar.xz
          retention-days: 7
